package org.home.yandex.practicum.dal;

import lombok.SneakyThrows;
import org.home.yandex.practicum.exceptions.NotFoundException;
import org.home.yandex.practicum.exceptions.ServerSideException;
import org.home.yandex.practicum.model.Film;
import org.home.yandex.practicum.model.Genre;
import org.home.yandex.practicum.model.UserLike;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.datasource.DataSourceUtils;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;
import java.util.Objects;

@Repository
public class FilmDbStorage implements DbStorage<Film> {

    private final JdbcTemplate jdbcTemplate;
    private final Connection conn;
    private final KeyHolder keyHolder = new GeneratedKeyHolder();

    @SneakyThrows
    @Autowired
    public FilmDbStorage(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
        conn = DataSourceUtils.getConnection(Objects.requireNonNull(jdbcTemplate.getDataSource()));
        conn.setAutoCommit(false);
    }

    @SneakyThrows
    @Override
    public Film update(Film film) {
        try {
        String sqlQuery = "update FILM set " +
                    "ID = ?, NAME = ?, DESCRIPTION = ?, DATE_PROD = ?, DURATION = ?, MPA =? " +
                    "where ID = ?";
          jdbcTemplate.update(sqlQuery
                    , film.getId()
                    , film.getName()
                    , film.getDescription()
                    , film.getDateProd()
                    , film.getDuration()
                    , film.getMpa(), film.getId());
            conn.commit();
            String sqlQuery2 = "update FILM_GENRE set " +
                    "ID = ?, FILMID = ?, GENRE = ?" +
                    "where FILMID = ?";
            for(var genre : film.getGenre()) {
                jdbcTemplate.update(sqlQuery2,
                        genre.getId(),
                        genre.getFilmId(),
                        genre.getFilmGenre(),
                        film.getId());
                conn.commit();
            }
            String sqlQuery3 = "update FILM_LIKES set " +
                    "ID = ?, FILMID = ?, USERID = ? " +
                    "where FILMID = ?";
            for(var like : film.getUserLike()) {
                jdbcTemplate.update(sqlQuery3,
                        like.getId(),
                        like.getFilmId(),
                        like.getUserId(),
                        film.getId());
                conn.commit();
            }
            return get(film.getId());
        } catch (SQLException e) {
            conn.rollback();
            throw new ServerSideException(e.getMessage());
        }
    }

    @SneakyThrows
    @Override
    public Film addParam(int filmId, int id) {
        try {
            String sqlQuery = "insert into FILM_LIKES (FILMID, USERID) values (?, ?)";
            jdbcTemplate.update(sqlQuery, filmId, id);
            conn.commit();
            return get(filmId);
        } catch (SQLException e) {
            conn.rollback();
            throw new ServerSideException(e.getMessage());
        }
    }

    @SneakyThrows
    @Override
    public Film removeParam(int filmId, int id) {
        try {
            String sqlQuery = "delete from FILM_LIKES where  USERID = ?";
            jdbcTemplate.update(sqlQuery, id);
            conn.commit();
            return get(filmId);
        } catch (SQLException e) {
            conn.rollback();
            throw new ServerSideException(e.getMessage());
        }
    }

    @SneakyThrows
    @Override
    public Film create(Film film) {
        try {
            String sqlQuery = "insert into FILM (NAME, DESCRIPTION, DATE_PROD, DURATION, MPA) " +
                    "values (%s, %s, %s, %s, %s)";
            String sql = String.format(sqlQuery, film.getName(), film.getDescription(), film.getDateProd(), film.getDuration(), film.getMpa());
            int filmId = getAutogeneratedId(sql) ;
            String sqlQuery2 = "insert into FILM_GENRE (FILMID, GENRE)" +
                    "values (?, ?)";
            for(var genre : film.getGenre()) {
                jdbcTemplate.update(sqlQuery2,
                        film.getId(),
                        genre.getFilmGenre());
                conn.commit();
                return get(filmId);
            }
        } catch (SQLException e) {
            conn.rollback();
            throw new ServerSideException(e.getMessage());
        }
        conn.rollback();
        throw new ServerSideException("Creating Film failed");
    }

    @SneakyThrows
    public int getAutogeneratedId(String query) {
        jdbcTemplate.update(connection -> {
            PreparedStatement ps = connection
                    .prepareStatement(query, Statement.RETURN_GENERATED_KEYS);
            ps.setString(1, "id");
            return ps;
        }, keyHolder);
        conn.commit();
        return (int) keyHolder.getKey();
    }

    @SneakyThrows
    @Override
    public Film delete(int id) {
        try {
            Film film = get(id);
            String sqlQuery = "delete from FILM where ID = ?";
            jdbcTemplate.update(sqlQuery, id);
            conn.commit();
            return film;
        } catch (SQLException e) {
            conn.rollback();
            throw new ServerSideException(e.getMessage());
        }
    }

    @Override
    public Film get(int id) {
        String sqlQuery =
                "SELECT ID, " +
                        "NAME, " +
                        "DESCRIPTION, " +
                        "DATE_PROD, " +
                        "DURATION, " +
                        "MPA " +
                        "FROM FILM WHERE ID = ?";
        var film = jdbcTemplate.queryForObject(sqlQuery, this::mapRowToFilm, id);
        if (film == null) {
            throw new NotFoundException("Film not found");
        }
        String sqlQuery1 =
                "SELECT ID, " +
                        "FILMID, " +
                        "GENRE " +
                        "FROM FILM_GENRE WHERE FILMID = ?";
        var filmGenre = jdbcTemplate.query(sqlQuery1, this::mapRowToGenre, id);
        String sqlQuery2 =
                "SELECT ID, " +
                        "FILMID, " +
                        "USERID " +
                        "FROM FILM_LIKES WHERE FILMID = ?";
        var filmLikes = jdbcTemplate.query(sqlQuery2, this::mapRowToUserLike, id);
            for (Genre genre : filmGenre) {
                if (film.getId().equals(genre.getFilmId())) {
                    film.addNewGenre(genre);
                }
            }
            if(!filmLikes.isEmpty()) {
            for (UserLike userLike : filmLikes) {
                if (userLike.getFilmId().equals(film.getId())) {
                    film.addNewUserLike(userLike);
                }
            }
        }
            return film;
    }

    @Override
    public List<Film> getCollection() {
        String sqlQuery =
                "SELECT FILM.ID, " +
                        "NAME, " +
                        "DESCRIPTION, " +
                        "DATE_PROD, " +
                        "DURATION, " +
                        "MPA " +
                        "FROM FILM ";
        var filmList = jdbcTemplate.query(sqlQuery, this::mapRowToFilm);
        String sqlQuery1 =
                "SELECT ID, " +
                        "FILMID, " +
                        "GENRE " +
                        "FROM FILM_GENRE ";
        var filmGenre = jdbcTemplate.query(sqlQuery1, this::mapRowToGenre);
        String sqlQuery2 =
                "SELECT ID, " +
                        "FILMID, " +
                        "USERID " +
                        "FROM FILM_LIKES ";
        var filmLikes = jdbcTemplate.query(sqlQuery2, this::mapRowToUserLike);
        for (Film film : filmList) {
            for (Genre genre : filmGenre) {
                if (film.getId().equals(genre.getFilmId())) {
                    film.addNewGenre(genre);
                }
            }
            for (UserLike userLike : filmLikes) {
                if (userLike.getFilmId().equals(film.getId())) {
                    film.addNewUserLike(userLike);
                }
            }
        }
        return filmList;
    }

    private Film mapRowToFilm(ResultSet resultSet, int rowNum) throws SQLException {
        return Film.builder()
                .id(resultSet.getInt("id"))
                .name(resultSet.getString("name"))
                .description(resultSet.getString("description"))
                .dateProd(resultSet.getDate("releaseDate").toLocalDate())
                .duration(resultSet.getLong("duration"))
                .mpa(resultSet.getString("mpa"))
                .build();
    }

    private Genre mapRowToGenre(ResultSet resultSet, int rowNum) throws SQLException {
        return Genre.builder()
                .id(resultSet.getInt("id"))
                .filmId(resultSet.getInt("filmId"))
                .filmGenre(org.home.yandex.practicum.enums.Genre.valueOf(resultSet.getString("genre")))
                .build();
    }

    private UserLike mapRowToUserLike(ResultSet resultSet, int rowNum) throws SQLException {
        return UserLike.builder()
                .id(resultSet.getInt("id"))
                .filmId(resultSet.getInt("filmId"))
                .userId(resultSet.getInt("userId"))
                .build();
    }
}
